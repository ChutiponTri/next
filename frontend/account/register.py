import streamlit as st
from datetime import date
from api_request import get_requests, post_requests, post_register, post_checklist

class Registration():
    def __init__(self):
        self.header()
        self.sidebar()
        self.regiter_form()

    # Function to Initialize Header
    def header(self):
        # Create Header Content
        st.header("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", divider="rainbow")

    # Function to Initialize Sidebar
    def sidebar(self):
        pass

    # Function to Initialize Register Form
    def regiter_form(self):
        # Create Input Register Form
        form = st.form("‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
        name_surname = form.columns(2)
        name = name_surname[0].text_input("‡∏ä‡∏∑‡πà‡∏≠", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠", value="")
        surname = name_surname[1].text_input("‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", value="")

        gender_birth = form.columns(3)
        gender = gender_birth[0].selectbox("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"], index=0)
        birth = gender_birth[1].date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î", min_value=date(1900, 1, 1))
        disease = gender_birth[2].text_input("‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß", placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß")
            
        height_weight_radius = form.columns(2)
        height = height_weight_radius[0].number_input("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (cm)", step=10, min_value=100, placeholder="(Ex. 170)")
        weight = height_weight_radius[1].number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (kg)", step=1, placeholder="(Ex. 55)")

        submit = form.form_submit_button("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", disabled=False)

        if submit:
            self.on_register(name, surname, gender, birth, disease, height, weight, form)
                    
    # Function to Register
    def on_register(self, name, surname, gender, birth, disease, height, weight, form):
        data = {
            "name": name.strip() if name != "" else None,
            "surname": surname.strip() if surname != "" else None,
            "gender": gender,
            "weight": weight if weight > 0 else None,
            "height": height if height > 100 else None,
            "disease": disease.strip(),
            "birth": str(birth)
        }

        if all(value is not None for value in data.values()):
            result = post_register(data)
            if "status" in result.keys():
                if "Success" in result["status"]:
                    check_list = {
                        "name": data["name"],
                        "surname": data["surname"],
                        "tasks": {
                            "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤": ["‡∏ß‡∏±‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à", "‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö", "‡∏¢‡∏≤‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£"],
                            "‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á": ["‡∏ß‡∏±‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à", "‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö", "‡∏¢‡∏≤‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£"],
                            "‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô": ["‡∏ß‡∏±‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à", "‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö", "‡∏¢‡∏≤‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£"],
                            "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏¢‡πá‡∏ô": ["‡∏ß‡∏±‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à", "‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö", "‡∏¢‡∏≤‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£"],
                            "‡∏ï‡∏≠‡∏ô‡∏Ñ‡πà‡∏≥": ["‡∏ß‡∏±‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à", "‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö", "‡∏¢‡∏≤‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£"],
                        }
                    }
                    upsert = self.upsert_checklist(check_list)
                    if upsert:
                        form.success("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ %s ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" % name, icon="‚úÖ")
                    else:
                        form.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Check List ‡πÑ‡∏î‡πâ", icon="‚ö†Ô∏è")
                else:
                    form.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ %s" % result["status"], icon="‚ö†Ô∏è")
            else:
                form.error("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", icon="üö®")
        else:
            # form.write(data)
            form.warning("‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", icon="‚ö†Ô∏è")

    # Function to Create Initial Check-List
    def upsert_checklist(self, data):
        result = post_checklist(data)
        if type(result) == dict:
            if "status" in result.keys():
                if "Success" in result["status"]:
                    return True
        return False

register = Registration()